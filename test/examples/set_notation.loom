// A reference for set notation in Loom

textile builtin {
    textile operators {
        // all builtin sets include:
        // BOOL -- true or false
        // N -- natural numbers
        // Z -- integers
        // Q -- rational numbers
        // R -- real numbers
        // I -- imaginary numbers
        // C -- complex numbers
        
        bool = @set{BOOL};
        setN = @set{N};
        setC = @set{C};

        // Axioms are functions that can directly call YARN functionality
        // In exchange for this power, axioms can ONLY call yarn functionality
        // @yarn "JLS" {setN setN @any @any -> @any}
        less { setN setN -> bool } = @axiom { lhs rhs -> @yarn { "JLS", lhs, rhs, true, false } };
        pow { setN setN -> setN } = @axiom { lhs rhs -> @yarn { "POW", lhs, rhs } };

        // an example of adding complex numbers
        add { setC setC -> setC } = @axiom {
            lhs rhs -> {
                real = @yarn { "ADD", lhs.real, rhs.real };
                imag = @yarn { "ADD", lhs.imag, rhs.imag };
            } @yarn { "ADD", real, imag };
        }

        export less;
        export pow;
        export add;
    }

    import operators;

    // this defines a new set "uint32"
    // "@set { ... }" notation defines a new set
    // "x @set N" defines a member x of uint32, indicating that x must be a member of the natural numbers as well
    // "|" implies a constraint on x
    // "x < 2 ** 32" says that x can be no greater than 2 to the power of 32
    // the less and pow operators translate to YARN statements, so they serve as
    // an axiomatic basis for all sets
    // any axiomatic function can be used in the constraints of a set
    // constraints MUST resolve to a boolean value

    uint32 = @set { x @set { N } | builtin.operators.less x builtin.operators.pow 2 32 };

    // here are two sets
    even = @set { x uint32 | builtin.operators.equals builtin.operators.modulo x 0 };
    powsOf2 = @set { x uint32, y uint32 | builtin.operators.equals x builtin.operators.pow 2 y };

    // how will the compiler know that powsOf2 is a subset of even???
}

food_t = @set {hay, leaves, grass, carrots, beets, fish}
animal_i = @set {
    x |
    @exists { x.makesNoise {-> string} }
    @exists { x.eatsFood {food_t -> bool} }
}
mammal_i = (animal_i | @exists { x.pregnancyDuration int });

// throws a compiler error since several functions do not exist
cat animal_i = ();

// OK because in addition to equivalent sets, supersets can be assigned
cat animal_i = (
    makesNoise = "meow", 
    eatsFood = food -> {
        @self -> fish -> true;
    } false,
    needsScratch = true
);

//=================================================================================
// Set of @keywords
//=================================================================================

@self -- function
    // this keyword returns the current function

@set -- set
    @set { [values] <set | [constraint]> }
    // this keyword defines a set

@exists -- constraint
    @exists { item set }
    // requires that item exists, and that it is within set

@axiom -- function
    @axiom { function }
    // requires that all functions called within function to either be yarn or also axiom

@yarn -- function
    @yarn { command, [args] }
    // calls a specific yarn function

@choose -- function
    @choose { condition, [results] }
    // chooses a result based on the resolution of condition
    // all results must return a value from the same set

@order -- condition
@equal -- result
@subset -- result
@superset -- result
@proper_subset -- result
@proper_superset -- result

a = @set {x,y,z};
b = @set {x};

@choose {
    @order { a, b }, 
    @superset { true }, 
    @proper_subset { false }
};